steps:


# Build the base images. These are not pushed externally, but rather
# used the build the final images which are pushed.

## First, we build the non-GPU base image
- name: 'debian'
  args: ['mkdir', '-p', '/workspace/containers/base/pydatalab']
  id:   'makeDir'
- name: 'gcr.io/cloud-builders/docker'
  args: ['pull', 'ubuntu:16.04']
  id:   'pullUbuntu'
- name: 'gcr.io/cloud-builders/docker'
  args: ['tag', 'ubuntu:16.04', 'datalab-external-base-image']
  id:   'tagUbuntu'
  waitFor: ['pullUbuntu']
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'datalab-base', '/workspace/containers/base/']
  id:   'buildBase'
  waitFor: ['makeDir', 'tagUbuntu']

# Now, build the real images (which we push externally)

## Then build the non-GPU Datalab image...
- name: 'debian'
  args: ['/workspace/containers/datalab/prepare.sh', 'datalab-base', '${REVISION_ID}']
  id:   'prepareDatalab'
  waitFor: ['buildBase']
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/${PROJECT_ID}/datalab:commit-${REVISION_ID}', '/workspace/containers/datalab/']
  id:   'buildDatalab'
  waitFor: ['prepareDatalab']
- name: 'debian'
  args: ['/workspace/containers/datalab/cleanup.sh']
  id:   'cleanupDatalab'
  waitFor: ['buildDatalab']

## Tag all of the images as "commit-latest-master-build" so that other processes
## can easily pick up the latest one.
- name: gcr.io/cloud-builders/docker
  args: ['tag', 'gcr.io/${PROJECT_ID}/datalab:commit-${REVISION_ID}', 'gcr.io/${PROJECT_ID}/datalab:commit-latest-master-build']
  waitFor: ['buildDatalab']
  id: 'tagDatalabMasterBuild'

images:
  - 'gcr.io/${PROJECT_ID}/datalab:commit-${REVISION_ID}'
  - 'gcr.io/${PROJECT_ID}/datalab:commit-latest-master-build'

timeout: '7200s'
